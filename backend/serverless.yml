service: studiahub-backend

frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs20.x
  region: ${opt:region, 'us-east-1'}
  stage: ${opt:stage, 'dev'}
  httpApi:
    cors: true
  environment:
    S3_BUCKET: ${env:S3_BUCKET, '${self:service}-${self:provider.stage}-assets'}
    PROCESSING_QUEUE_URL:
      Ref: ProcessingQueue
    QUIZ_QUEUE_URL:
      Ref: QuizQueue
    OPENAI_API_KEY: ${env:OPENAI_API_KEY}
    PINECONE_API_KEY: ${env:PINECONE_API_KEY}
    PINECONE_ENVIRONMENT: ${env:PINECONE_ENVIRONMENT, 'us-east-1-aws'}
    STRIPE_SECRET_KEY: ${env:STRIPE_SECRET_KEY}
    STRIPE_WEBHOOK_SECRET: ${env:STRIPE_WEBHOOK_SECRET}
    STRIPE_MONTHLY_PRICE_ID: ${env:STRIPE_MONTHLY_PRICE_ID}
    STRIPE_ANNUAL_PRICE_ID: ${env:STRIPE_ANNUAL_PRICE_ID}
    FREE_TIER_WORDS_LIMIT: ${env:FREE_TIER_WORDS_LIMIT, '100000'}
    FREE_TIER_QUESTIONS_LIMIT: ${env:FREE_TIER_QUESTIONS_LIMIT, '50'}
    FREE_TIER_TOKENS_LIMIT: ${env:FREE_TIER_TOKENS_LIMIT, '50000'}
    PRO_TIER_WORDS_LIMIT: ${env:PRO_TIER_WORDS_LIMIT, '1000000'}
    PRO_TIER_QUESTIONS_LIMIT: ${env:PRO_TIER_QUESTIONS_LIMIT, '500'}
    PRO_TIER_TOKENS_LIMIT: ${env:PRO_TIER_TOKENS_LIMIT, '500000'}
    ITEMS_TABLE: ${self:service}-${self:provider.stage}-items
    FILES_TABLE: ${self:service}-${self:provider.stage}-files
    QUIZ_TABLE: ${self:service}-${self:provider.stage}-quizzes
    CONVERSATIONS_TABLE: ${self:service}-${self:provider.stage}-conversations
    MESSAGES_TABLE: ${self:service}-${self:provider.stage}-messages
    USAGE_TABLE: ${self:service}-${self:provider.stage}-usage
    SUBSCRIPTIONS_TABLE: ${self:service}-${self:provider.stage}-subscriptions
    FRONTEND_URL: ${env:FRONTEND_URL, 'http://localhost:3000'}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ITEMS_TABLE}
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FILES_TABLE}
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.FILES_TABLE}/index/*
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.QUIZ_TABLE}
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.QUIZ_TABLE}/index/*
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONVERSATIONS_TABLE}
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.CONVERSATIONS_TABLE}/index/*
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MESSAGES_TABLE}
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.MESSAGES_TABLE}/index/*
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USAGE_TABLE}
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SUBSCRIPTIONS_TABLE}
            - arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.SUBSCRIPTIONS_TABLE}/index/*
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:GetObject
            - s3:DeleteObject
            - s3:PutObjectAcl
          Resource:
            - arn:aws:s3:::${self:provider.environment.S3_BUCKET}/*
        - Effect: Allow
          Action:
            - s3:ListBucket
          Resource:
            - arn:aws:s3:::${self:provider.environment.S3_BUCKET}
        - Effect: Allow
          Action:
            - textract:DetectDocumentText
            - textract:AnalyzeDocument
          Resource: "*"
        - Effect: Allow
          Action:
            - sqs:SendMessage
          Resource:
            - { "Fn::GetAtt": [ ProcessingQueue, Arn ] }
        - Effect: Allow
          Action:
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
          Resource:
            - { "Fn::GetAtt": [ ProcessingQueue, Arn ] }
        - Effect: Allow
          Action:
            - sqs:SendMessage
          Resource:
            - { "Fn::GetAtt": [ QuizQueue, Arn ] }
        - Effect: Allow
          Action:
            - sqs:ReceiveMessage
            - sqs:DeleteMessage
            - sqs:GetQueueAttributes
          Resource:
            - { "Fn::GetAtt": [ QuizQueue, Arn ] }

plugins:
  - serverless-esbuild
  - serverless-dotenv-plugin
  - serverless-dynamodb-local
  - serverless-offline

custom:
  esbuild:
    bundle: true
    minify: true
    target: node20
    sourcemap: false
    platform: node
    concurrency: 4
    keepOutputDirectory: false
    packager: npm
    installExtraArgs:
      - '--production'
      - '--no-optional'
    exclude:
      - 'typescript'
      - '@types/*'
      - 'serverless*'
      - 'eslint*'
    watch:
      pattern: ['src/**/*.ts']
      ignore: ['.serverless/**/*', '.build/**/*']
  dynamodb:
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
    stages:
      - dev
  serverless-offline:
    httpPort: 4000
  dotenv:
    path: .env.${sls:stage}

functions:
  health:
    handler: src/handlers/health.handler
    events:
      - httpApi:
          path: /health
          method: GET
  filesGet:
    handler: src/handlers/files/fileStatus.get
    events:
      - httpApi:
          path: /files/{key+}
          method: GET
  presignedUrl:
    handler: src/handlers/files/presignedUrl.generatePresignedUrl
    events:
      - httpApi:
          path: /upload/presigned
          method: POST
  confirmUpload:
    handler: src/handlers/files/presignedUrl.confirmUpload
    events:
      - httpApi:
          path: /upload/confirm
          method: POST
  filesList:
    handler: src/handlers/files/filesList.list
    events:
      - httpApi:
          path: /files
          method: GET
  filesDelete:
    handler: src/handlers/files/filesList.deleteFile
    events:
      - httpApi:
          path: /files/{id}
          method: DELETE
  filesToggle:
    handler: src/handlers/files/filesList.toggleFile
    events:
      - httpApi:
          path: /files/{id}/toggle
          method: PATCH

  generateQuiz:
    handler: src/handlers/quiz/generateQuiz.generateQuiz
    timeout: 25
    memorySize: 384
    events:
      - httpApi:
          path: /quiz/generate
          method: POST

  quizStatus:
    handler: src/handlers/quiz/quizStatus.getQuizStatus
    timeout: 8
    memorySize: 192
    events:
      - httpApi:
          path: /quiz/{id}/status
          method: GET

  userQuizzes:
    handler: src/handlers/quiz/quizStatus.getUserQuizzes
    timeout: 10
    memorySize: 256
    events:
      - httpApi:
          path: /quiz/user
          method: GET

  deleteQuiz:
    handler: src/handlers/quiz/deleteQuiz.deleteQuiz
    timeout: 8
    memorySize: 192
    events:
      - httpApi:
          path: /quiz/{id}
          method: DELETE

  chatSendMessage:
    handler: src/handlers/chat/sendMessage.sendMessage
    timeout: 45
    memorySize: 1024
    events:
      - httpApi:
          path: /chat/messages
          method: POST

  chatGetMessages:
    handler: src/handlers/chat/getMessages.getMessages
    timeout: 10
    memorySize: 512
    events:
      - httpApi:
          path: /chat/{conversationId}/messages
          method: GET

  chatGetConversations:
    handler: src/handlers/chat/getConversations.getConversations
    timeout: 10
    memorySize: 256
    events:
      - httpApi:
          path: /chat/conversations
          method: GET

  chatDeleteConversation:
    handler: src/handlers/chat/getConversations.deleteConversation
    timeout: 5
    memorySize: 256
    events:
      - httpApi:
          path: /chat/conversations/{conversationId}
          method: DELETE

  chatGenerateTitle:
    handler: src/handlers/chat/chatTitle.generateTitle
    timeout: 15
    memorySize: 512
    events:
      - httpApi:
          path: /chat/conversations/{conversationId}/title
          method: POST

  getUserUsage:
    handler: src/handlers/usage/getUsage.getUserUsageHandler
    timeout: 10
    memorySize: 256
    events:
      - httpApi:
          path: /usage/{userId}
          method: GET

  createCheckout:
    handler: src/handlers/subscriptions/createCheckout.createCheckoutSession
    timeout: 15
    memorySize: 256
    events:
      - httpApi:
          path: /subscriptions/checkout
          method: POST

  stripeWebhook:
    handler: src/handlers/subscriptions/webhook.stripeWebhook
    timeout: 30
    memorySize: 256
    events:
      - httpApi:
          path: /webhooks/stripe
          method: POST

  getSubscription:
    handler: src/handlers/subscriptions/getSubscription.getSubscription
    timeout: 10
    memorySize: 256
    events:
      - httpApi:
          path: /subscriptions/{userId}
          method: GET

  cancelSubscription:
    handler: src/handlers/subscriptions/cancelSubscription.cancelSubscription
    timeout: 15
    memorySize: 256
    events:
      - httpApi:
          path: /subscriptions/cancel
          method: POST

  renewSubscription:
    handler: src/handlers/subscriptions/renewSubscription.renewSubscription
    timeout: 15
    memorySize: 256
    events:
      - httpApi:
          path: /subscriptions/renew
          method: POST

  quizWorker:
    handler: src/handlers/quiz/quizWorker.handler
    timeout: 240
    memorySize: 768
    events:
      - sqs:
          arn:
            Fn::GetAtt: [ QuizQueue, Arn ]
          batchSize: 1
          maximumBatchingWindow: 0

  queueProcessor:
    handler: src/handlers/files/queue.process
    timeout: 900
    memorySize: 2048
    events:
      - sqs:
          arn:
            Fn::GetAtt: [ ProcessingQueue, Arn ]
          batchSize: 1

resources:
  Resources:    
    FilesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.FILES_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: key
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: status
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          # Existing: Lookup file by S3 key
          - IndexName: key-index
            KeySchema:
              - AttributeName: key
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          # OPTIMAL: Direct query for user's files by status (no filtering needed!)
          - IndexName: user-status-index
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: status
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    QuizTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.QUIZ_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes:
          # Simple: User quizzes (already works fine)
          - IndexName: user-index
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    ConversationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.CONVERSATIONS_TABLE}
        AttributeDefinitions:
          - AttributeName: conversationId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
          - AttributeName: lastMessageAt
            AttributeType: N
        KeySchema:
          - AttributeName: conversationId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: user-conversations-index
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: lastMessageAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        StreamSpecification:
          StreamViewType: NEW_AND_OLD_IMAGES

    MessagesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.MESSAGES_TABLE}
        AttributeDefinitions:
          - AttributeName: conversationId
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
          - AttributeName: messageId
            AttributeType: S
        KeySchema:
          - AttributeName: conversationId
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: message-id-index
            KeySchema:
              - AttributeName: messageId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST

    UsageTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.USAGE_TABLE}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    SubscriptionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.SUBSCRIPTIONS_TABLE}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: stripeCustomerId
            AttributeType: S
          - AttributeName: stripeSubscriptionId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: stripe-customer-index
            KeySchema:
              - AttributeName: stripeCustomerId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
          - IndexName: stripe-subscription-index
            KeySchema:
              - AttributeName: stripeSubscriptionId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        
    ProcessingDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-processing-dlq
        MessageRetentionPeriod: 1209600
    ProcessingQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-processing
        VisibilityTimeout: 900
        RedrivePolicy:
          deadLetterTargetArn: { "Fn::GetAtt": [ ProcessingDLQ, Arn ] }
          maxReceiveCount: 3

    QuizDLQ:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-quiz-dlq
        MessageRetentionPeriod: 1209600
    QuizQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:service}-${self:provider.stage}-quiz
        VisibilityTimeout: 300
        RedrivePolicy:
          deadLetterTargetArn: { "Fn::GetAtt": [ QuizDLQ, Arn ] }
          maxReceiveCount: 3


package:
  patterns:
    - '!test/**'
    - '!**/*.md'
    - '!**/*.txt'
    - '!**/LICENSE*'
    - '!**/CHANGELOG*'
    - '!**/.git/**'
    - '!**/docs/**'
    - '!**/examples/**'
    - '!**/coverage/**'
    - '!**/.nyc_output/**'
    - '!**/prisma/**'
    - '!**/*.prisma'
    - '!**/migrations/**'
    - '!**/.serverless/**'
    - '!**/.build/**'
    - '!**/node_modules/.cache/**'
  individually: true
  excludeDevDependencies: true
